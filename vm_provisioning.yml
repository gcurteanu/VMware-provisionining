---
- hosts: localhost
  connection: local
  gather_facts: False
  
  vars_files:
    - vm_provisioning_vars.yml

  vars:
    # default values

    # internal use templates
    # these define the structures for the VM configuration
    # can be customised to suit the needs
    nic_template:
      vlan: "{{ item.1.vlan }}"
      device_type: vmxnet3
      type: static
      ip: "{{ item.1.ip }}"
      netmask: "{{ item.1.network | ipaddr('netmask') }}"
      gateway: "{{ item.1.network | ipaddr('net') | ipaddr('1') | ipaddr('address') if item.0 == 'eth0' else '' }}"
    disk_template:
      size_gb: "{{ item }}"
      datastore: "{{ vidatastore }}"
      autoselect_datastore: true
    # First disk is defined separately
    # the disk size is by default 60G in this case
    os_disk:
      - 60

  vars_prompt:
    - name: "vipass"
      prompt: "Enter vCenter password"

  # Interfaces are named:
  # eth0 - vmname (main host name)
  # eth1 - vmname (backup)

  tasks:

    # generate the VLAN/IP allocation data
    # we set the hash for each interface
    # containing the VLAN ID and hostname to be used
    # it will get the IP info added at the allocation stage
    - name: "Allocate the IP addresses for the VM"
      block:
        - name: "Adding the Production VLAN info"
          set_fact:
            vlan_data: "{{ (vlan_data | default({})) | combine({'eth'+(item.0+([1,item.0]|min))|string : {'vlan' : item.1, 'hostname' : vmname }}, recursive=True) }}"
          with_indexed_items:
            - "{{ vlans }}"
          loop_control:
            label: "{{ item.1 }}"

        - name: "Adding the Backup VLAN info"
          set_fact:
            vlan_data: "{{ vlan_data | combine ({'eth1' : { 'vlan' : backup_vlan, 'hostname' : vmname + '-bk'}}, recursive=True) }}"

        # end of VLAN/IP allocation data

        - name: "Get VLANs"
          infoblox:
            server: "{{ ibxhost }}"
            username: "{{ ibxuser }}"
            password: "{{ ibxpass }}"
            api_version: 2.6
            action: get_network
            filters:
              - { filter: "*VLAN ID", value: "{{ item.value.vlan|string }}" }
          with_dict: "{{ vlan_data }}"
          register: vlan_result
          failed_when: vlan_result.result | length == 0
          loop_control:
            label: "{{ item.key }} : {{item.value.vlan}}"

        - name: "Format the VLAN information"
          set_fact:
            vlan_data: "{{ vlan_data | combine ({item.item.key : { 'network' : item.result[0].network, 'network_ref' : item.result[0]._ref }}, recursive=True) }}"
          with_items: "{{ vlan_result.results }}"
          loop_control:
            label: "{{item.item.key}}"

        - name: "Allocate IPs"
          infoblox:
            server: "{{ ibxhost }}"
            username: "{{ ibxuser }}"
            password: "{{ ibxpass }}"
            api_version: 2.6
            action: add_host
            network: '{{item.value.network}}'
            host: '{{item.value.hostname|lower}}'
            comment: 'Create via Unix VM provisioning'
          with_dict: "{{ vlan_data }}"
          register: ip_allocation
          failed_when: ip_allocation.result | length == 0
          loop_control:
            label: "{{item.key}} in {{item.value.network}}"

        - name: "Format the IP information"
          set_fact:
            vlan_data: "{{ vlan_data | combine ({item.item.key : { 'ip' : item.result.ipv4addrs[0].ipv4addr, 'ip_ref' : item.result.ipv4addrs[0]._ref, 'host_ref' : item.result._ref}}, recursive=True) }}"
          with_items: "{{ ip_allocation.results }}"
          loop_control:
            label: "{{item.item.key}}"

        - fail: msg="Sodding off"

      rescue:
        # De-allocate any already allocated IP addresses
        - name: "De-allocate IPs"
          infoblox:
            server: "{{ ibxhost }}"
            username: "{{ ibxuser }}"
            password: "{{ ibxpass }}"
            api_version: 2.6
            action: delete_host
            # use the host_ref here, to ensure CORRECT removal
            host: '{{item.value.host_ref|default("thisisadummyvaluepleaseignore")}}'
            comment: 'Create via Unix VM provisioning'
          with_dict: "{{ vlan_data }}"
          register: ip_removals
          failed_when: ip_removals.result | length == 0
          # only do removals if we managed to execute the allocation stage
          when: ip_allocation is defined
          loop_control:
            label: "Removing IP for {{item.key}} in {{item.value.network}}"

        #- debug: var=ip_removals

        # do a hard stop of the playbook
        # no point in going on further
        - name: "Full stop"
          meta: end_play        

    # Generate the structures to be passed to the VM creation task
    # The datastore must be known, and it's based on the site/cluster selected
    - name: "Generate disk configuration"
      set_fact:
        vm_disks: "{{ (vm_disks | default([])) + [disk_template] }}"
      with_items:
        - "{{ os_disk }}"
        - "{{ disks }}"
    
    # The ordering of the NICs is important
    - name: "Generate NIC configuration"
      set_fact:
        vm_networks: "{{ (vm_networks | default([])) + [nic_template] }}"
      with_items: [ "{{ vlan_data|dictsort }}" ]

    #- debug: var=vm_networks

    - fail: msg="Now sod off"

    - name: Create a VM from a template
      vmware_guest:
        hostname: '{{ vihost }}'
        username: '{{ viuser }}'
        password: '{{ icpass }}'
        validate_certs: no
        datacenter: '{{ vidc }}'
        cluster: '{{ vicluster }}'
        folder: '{{ vifolder }}'
        name: '{{ vmname }}'
        guest_id: '{{ vm_os }}'
        state: present
        template: '{{ vm_template }}'
        disk: "{{ vm_disks }}"
        networks: "{{ vm_networks }}"
        customization:
          dns_servers: '{{ vm_dns }}'
          domain: '{{ vm_domain }}'
          hostname: '{{ vmname }}'
      delegate_to: localhost
      register: deploy_info

    - debug: var=deploy_info

    - name: Customize the guest further
      vsphere_guest:
        vcenter_hostname: '{{ vihost }}'
        username: '{{ viuser }}'
        password: '{{ vipass }}'
        validate_certs: false
        guest: '{{ vmname }}'
        state: reconfigured
        vm_extra_config:
          # force keeping the same UUID
          # maybe not the best idea...
          ###uuid.action: keep
          # ensure a 5 sec boot delay
          bios.bootdelay: 5000
          notes: VM provisioned via Ansible
          # need to test if folder can be set using this method
          ### folder: MyFolder
      register: reconfigure_info
    